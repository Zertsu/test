# Autogenerated code, DO NOT EDIT
from RTE import Rte_Read_GuardingStateMachineSWC_b_guarding_mode, Rte_Read_GuardingStateMachineSWC_S_face_position, Rte_Read_GuardingStateMachineSWC_S_Max_distance_and_angle, Rte_Read_GuardingStateMachineSWC_f_avg_Distance, Rte_Read_GuardingStateMachineSWC_si16_turn_angle, Rte_Read_GuardingStateMachineSWC_f_Distance, Rte_Write_GuardingStateMachineSWC_b_guarding_mode, Rte_Write_GuardingStateMachineSWC_E_State, Rte_Write_GuardingStateMachineSWC_b_Angle_reset, Rte_Write_GuardingStateMachineSWC_b_Distance_reset, Rte_Write_GuardingStateMachineSWC_si16_turn_angle
# End of autogenerated code

import uasyncio as asyncio
from typedefs import States
from typedefs import GuardStates

global async_timer
async_timer = 50 # this variable stores the time in ms that we use in asyncio.sleep

global distance
distance = 

global state
state = States.IDLE

global guard_state
guard_state = GuardStates.SEARCH

global face_position
face_position = (0,0,0)

global last_turn
last_turn = TURN.RIGHT

def attacking():
    global face_position
    global distance 
    if face_position[1] > 125 and face_position[1] < 130:
        if distance > 50:
            state = GO_FORWARD
            Rte_Write_GuardingStateMachineSWC_E_State(state)
            continue
        else:
            guard_state = SHOOTING
            continue
    elif face_position[1] < 125
        state = TURN_LEFT
        Rte_Write_GuardingStateMachineSWC_E_State(state)
        continue
    elif face_position[1] > 130
        state = TURN_RIGHT
        Rte_Write_GuardingStateMachineSWC_E_State(state)
        continue

def searching():
    global guard_state
    global face_position
    global last_turn
    face_position = Rte_Read_GuardingStateMachineSWC_S_face_position
    if  face_position[0] == False:
        if last_turn == TURN.RIGHT:
            state = TURN_LEFT
            Rte_Write_GuardingStateMachineSWC_E_State(state)
            continue
        elif last_turn == TURN.LEFT:
            state = TURN_RIGHT
            Rte_Write_GuardingStateMachineSWC_E_State(state)
            continue
    elif face_position[0] == True:
        guard_state = GuardStates.ATTACKING
        continue



async def guard_state_machine():
    global async_timer
    while True: 
        guard_mode = Rte_Read_GuardingStateMachineSWC_b_guarding_mode
        if guard_mode:
            if guard_state == GuardStates.SEARCH:
                searching()
        await asyncio.sleep_ms(async_timer)  # Adjust sleep time later if needed
