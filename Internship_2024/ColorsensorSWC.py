# This SWC is responsible for the color senzors values to be processed
# This filters the raw colors that it gets and sends back the filtered color

# Autogenerated code, DO NOT EDIT
from RTE import Rte_Read_ColorsensorSWC_e_Raw_color, Rte_Write_ColorsensorSWC_e_Color
# End of autogenerated code

# for unit test:
from RTE import Rte_Write_IOHandler_e_Raw_color

from collections import OrderedDict
from pybricks.parameters import Color
import uasyncio as asyncio

global async_timer
async_timer = 50 # this variable stores the time in ms that we use in asyncio.sleep

global buffer_size
buffer_size = 10  # this variable stores the size of the buffer

global oldest_element 
oldest_element = 0  # the oldast elements location


# Task to read color sensor continuously
async def ColorsensorSWC():
    global async_timer
    global buffer_size
    global oldest_element
    color_buffer = []  # This will store 10 colors each time, analyzing and returning the most common one
    while True:
        while len(color_buffer) < buffer_size:
            color = Rte_Read_ColorsensorSWC_e_Raw_color()
            color_buffer.append(color)

        if len(color_buffer) == buffer_size:
            # Counting occurrences of each color in buffer using OrderedDict:
            color_counts = OrderedDict()
            for color in color_buffer:
                if color in color_counts:
                    color_counts[color] = color_counts[color] + 1
                else:
                    color_counts[color] = 1

            # Finding the most common color:
            most_common_color = max(color_counts, key=color_counts.get)


            Rte_Write_ColorsensorSWC_e_Color(most_common_color)

            print(most_common_color)

            color_buffer.pop(oldest_element)  # Removing oldest element

        await asyncio.sleep_ms(async_timer)  # Adjust sleep time later if needed

