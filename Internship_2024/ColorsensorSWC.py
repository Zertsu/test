# Autogenerated code, DO NOT EDIT
from RTE import Rte_Read_ColorsensorSWC_e_Raw_color, Rte_Write_ColorsensorSWC_e_Color
# End of autogenerated code

from pybricks.parameters import Color
import uasyncio as asyncio


# Configuration
RUN_PERIOD = 50 # [ms] Run period of the component
BUFFER_SIZE = 10 # Size of the buffer used for filtering

# Constants
OLDEST_ELEMENT = 0 # Oldest element in list (we add new ones to the end)

# Task to read color sensor continuously
async def ColorsensorSWC():
    global BUFFER_SIZE
    global OLDEST_ELEMENT
    
    # Initialize variables
    color_buffer = [None] * BUFFER_SIZE
    color_occurances = {
        Color.BLACK: 0,
        Color.BLUE: 0,
        Color.GREEN: 0,
        Color.YELLOW: 0,
        Color.RED: 0,
        Color.WHITE: 0,
        Color.BROWN: 0,
        Color.ORANGE: 0,
        Color.PURPLE: 0,
        None : BUFFER_SIZE
    }
    
    while True:
        # Remove the oldest color from the buffer
        removedColor = color_buffer.pop(OLDEST_ELEMENT)
        color_occurances[removedColor] = color_occurances[removedColor] - 1

        # Add incoming color to the buffer
        currentColor = Rte_Read_ColorsensorSWC_e_Raw_color()
        color_buffer.append(currentColor)
        color_occurances[currentColor] = color_occurances[currentColor] + 1

        # Get most common color and output it
        mostCommonColor = max(color_occurances, key=color_occurances.get)
        Rte_Write_ColorsensorSWC_e_Color(mostCommonColor)

        await asyncio.sleep_ms(RUN_PERIOD)
