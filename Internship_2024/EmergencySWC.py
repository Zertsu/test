# This SWC is responsible for the emergency cases and sets the emergency bits 

# Autogenerated code, DO NOT EDIT
from RTE import Rte_Read_EmergencySWC_ui32_Time, Rte_Read_EmergencySWC_ui32_Last_packet_time, Rte_Read_EmergencySWC_f_Distance, Rte_Write_EmergencySWC_b_Emergency_distance, Rte_Write_EmergencySWC_b_Emergency_timeout
# End of autogenerated code

import uasyncio as asyncio
global async_timer
async_timer = 50 # this variable stores the time in ms that we use in asyncio.sleep

global emergency_bit
emergency_bit = 0  # this variable stores the value of the emergency bit

async def EmergencySWC():
    global async_timer
    distance_emergency = 10 # this variable stores the distance in cm that is the emergency distance
    while True: 
        # time = Rte_Read_EmergencySWC_ui32_Time()    # we will probably remove stopwatch, so time as well
        lastPacketTime = Rte_Read_EmergencySWC_ui32_Last_packet_time()  # tells us how many seconds have passed since receiving the last packet
        distance = Rte_Read_EmergencySWC_f_Distance() # gets the distance from the ultrasonic senzor
        global emergency_bit
        
        if distance < distance_emergency:  
            emergency_bit = 1
            Rte_Write_EmergencySWC_b_Emergency_distance(emergency_bit)
        
        if lastPacketTime > 1000:      
            emergency_bit = 1         #ms   # if last packet time is more than a second, enter timeout emergency mode
            Rte_Write_EmergencySWC_b_Emergency_timeout(emergency_bit)

        if emergency_bit == 1 and distance > distance_emergency and lastPacketTime < 1000:
            emergency_bit = 0       
            Rte_Write_EmergencySWC_b_Emergency_distance(emergency_bit)
            Rte_Write_EmergencySWC_b_Emergency_timeout(emergency_bit)

        await asyncio.sleep_ms(async_timer)  # Adjust sleep time later if needed
