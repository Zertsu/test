# This SWC is responsible for the emergency cases and sets the emergency bits 

# Autogenerated code, DO NOT EDIT
from RTE import Rte_Read_EmergencySWC_b_Control_bits_valid, Rte_Read_EmergencySWC_f_Distance, Rte_Read_EmergencySWC_b_guarding_emergency, Rte_Write_EmergencySWC_b_Emergency_distance, Rte_Write_EmergencySWC_b_Emergency_timeout, Rte_Write_EmergencySWC_b_guarding_emergency, Rte_Write_EmergencySWC_b_guarding_mode
# End of autogenerated code

import uasyncio as asyncio
global async_timer
async_timer = 50 # this variable stores the time in ms that we use in asyncio.sleep

global distance_emergency_treshold
distance_emergency_treshold = 10  # this variable stores the distance in cm that is the emergency distance



# Logger
import Logger
log = Logger.Logger("Emergency SWC")

async def EmergencySWC():
    global async_timer
    global distance_emergency_treshold


    previousTimeOutEmergency = False
    distanceEmergency = False
    previousDistanceEmergency = False

    log.LOGI("Starting emergency SWC")
    while True: 
        timeOutEmergency = Rte_Read_EmergencySWC_b_Control_bits_valid() # tells us when the connection is timed out
        distance = Rte_Read_EmergencySWC_f_Distance() # gets the distance from the ultrasonic senzor
        guardEmergency = Rte_Read_EmergencySWC_b_guarding_emergency() # gets if we are in guarding emergency (in a box)
        
        if distance < distance_emergency_treshold:
            if not previousDistanceEmergency:
                log.LOGW("Distance emergency")
                distanceEmergency = True
                Rte_Write_EmergencySWC_b_Emergency_distance(distanceEmergency)
        else:
            if previousDistanceEmergency:
                log.LOGW("Cleared distance emergency")
                distanceEmergency = False
                Rte_Write_EmergencySWC_b_Emergency_distance(distanceEmergency)


        if timeOutEmergency:
            if not previousTimeOutEmergency:
                log.LOGW("Timeout emergency")
                Rte_Write_EmergencySWC_b_Emergency_timeout(timeOutEmergency)
        else:
            if previousTimeOutEmergency:
                log.LOGW("Cleared timeout emergency")
                Rte_Write_EmergencySWC_b_Emergency_timeout(timeOutEmergency)

        if guardEmergency:
            log.LOGW("Guard emergency")
            Rte_Write_EmergencySWC_b_guarding_emergency(False)
            Rte_Write_EmergencySWC_b_guarding_mode(False)


        previousTimeOutEmergency = timeOutEmergency
        previousDistanceEmergency = distanceEmergency
        previousGuardEmergency = guardEmergency


        await asyncio.sleep_ms(async_timer)  # Adjust sleep time later if needed
    log.LOGF("Exited loop")
