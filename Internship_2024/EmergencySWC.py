# Autogenerated code, DO NOT EDIT
from RTE import Rte_Read_EmergencySWC_ui32_Time, Rte_Read_EmergencySWC_ui32_Last_packet_time, Rte_Read_EmergencySWC_f_Distance, Rte_Write_EmergencySWC_b_Emergency_distance, Rte_Write_EmergencySWC_b_Emergency_timeout
# End of autogenerated code

import uasyncio as asyncio

global emergency_bit
emergency_bit = 0

async def EmergencySWC():
    while True: 
        # time = Rte_Read_EmergencySWC_ui32_Time()    # we will probably remove stopwatch, so time as well
        lastPacketTime = Rte_Read_EmergencySWC_ui32_Last_packet_time()  # tells us how many seconds have passed since receiving the last packet
        distance = Rte_Read_EmergencySWC_f_Distance()
        global emergency_bit
        
        if distance < 10:    # this is already in cm, right?
            emergency_bit = 1
            Rte_Write_EmergencySWC_b_Emergency_distance(emergency_bit)
        
        if lastPacketTime > 300:      
            emergency_bit = 1         #ms   # if last packet time is more than half a second, enter timeout emergency mode
            Rte_Write_EmergencySWC_b_Emergency_timeout(emergency_bit)

        if emergency_bit == 1 and distance > 10 and lastPacketTime < 300:
            emergency_bit = 0       
            Rte_Write_EmergencySWC_b_Emergency_distance(emergency_bit)
            Rte_Write_EmergencySWC_b_Emergency_timeout(emergency_bit)

        await asyncio.sleep_ms(50)  # Adjust sleep time later if needed
