# This SWC is responsible for the emergency cases and sets the emergency bits 

# Autogenerated code, DO NOT EDIT
from RTE import Rte_Read_EmergencySWC_b_Control_bits_valid, Rte_Read_EmergencySWC_f_Distance, Rte_Write_EmergencySWC_b_Emergency_distance, Rte_Write_EmergencySWC_b_Emergency_timeout
# End of autogenerated code

import uasyncio as asyncio
global async_timer
async_timer = 50 # this variable stores the time in ms that we use in asyncio.sleep

global emergency_bit
emergency_bit = False  # this variable stores the value of the emergency bit


global distance_emergency
distance_emergency = 10  # this variable stores the distance in cm that is the emergency distance


async def EmergencySWC():
    global async_timer
    while True: 
        connectionTimedOut = Rte_Read_EmergencySWC_b_Control_bits_valid() # tells us when the connection is timed out
        distance = Rte_Read_EmergencySWC_f_Distance() # gets the distance from the ultrasonic senzor
        global emergency_bit
        global distance_emergency
        global timeout

        if distance < distance_emergency:  
            emergency_bit = True
            Rte_Write_EmergencySWC_b_Emergency_distance(emergency_bit)
        
        if connectionTimedOut:      
            emergency_bit = True
            Rte_Write_EmergencySWC_b_Emergency_timeout(emergency_bit)

        if emergency_bit and distance > distance_emergency and not connectionTimedOut:
            emergency_bit = False      
            Rte_Write_EmergencySWC_b_Emergency_distance(emergency_bit)
            Rte_Write_EmergencySWC_b_Emergency_timeout(emergency_bit)

        await asyncio.sleep_ms(async_timer)  # Adjust sleep time later if needed
